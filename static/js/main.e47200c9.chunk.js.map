{"version":3,"sources":["components/WelcomeScreen/WelcomeScreen.jsx","pages/WelcomePage.jsx","components/AppFrame/AppFrame.jsx","components/IconState/IconState.jsx","utils/utils.jsx","utils/transform/getAllWeather.jsx","utils/urls.jsx","hooks/useCityList.jsx","components/CityInfo/CityInfo.jsx","components/Weather/Weather.jsx","components/CityList/CityList.jsx","utils/serviceCities.jsx","pages/MainPage.jsx","utils/transform/getChartData.jsx","utils/transform/getForecastItemList.jsx","hooks/useCityPage.jsx","components/ForecastChart/ForecastChart.jsx","components/ForecastItem/ForecastItem.jsx","components/Forecast/Forecast.jsx","components/WeatherDetails/WeatherDetails.jsx","pages/CityPage.jsx","pages/NotFoundPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["WelcomeScreen","children","myRefDiv","useRef","useState","vanta","setVanta","useEffect","Clouds","THREE","el","current","destroy","className","ref","WelcomePage","props","Grid","container","direction","justify","item","xs","alignItems","Provider","value","size","Typography","variant","color","aria-label","component","RouterLink","to","AppFrame","AppBar","position","Toolbar","IconButton","LinkRouter","sm","md","lg","validValues","stateByName","clouds","WiCloud","clear","WiDaySunny","drizzle","WiRaindrop","snow","WiSnow","rain","WiRain","thunderstorm","WiThunderstorm","IconState","state","renderState","getCityAndCountry","city","countryCode","toCelsius","number","Number","convertUnits","from","toFixed","getAllWeather","response","data","key","temperature","main","temp","wind","speed","humidity","stateFromServer","weather","toLowerCase","propValue","includes","api_key","getUrlWeather","getUrlForecast","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","country","a","url","axios","get","AllWeatherAux","status","console","log","request","forEach","CityInfo","display","Weather","spacing","Skeleton","height","width","CityList","onClickCity","Alert","onClose","severity","List","map","eventOnClickCity","CityAndCountry","ListItem","button","onClick","MainPage","history","useHistory","Paper","elevation","push","getChartData","d","moment","add","day","temps","list","filter","unix","dt","dayOfYear","dayHour","format","min","Math","max","hasTemps","length","getForecastItemList","interval","index","hour","weekDay","useCityPage","setData","forecastItemList","setForecastItemList","useParams","dataAux","forecastItemListAux","getForecast","ForecastChart","margin","top","bottom","right","left","dataKey","type","stroke","ForecastItem","Forecast","node","data-testid","renderForecastItems","WeatherDetails","CityPage","code","useMemo","LinearProgress","NotFound","App","exact","path","NotFoundPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e47200c9.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport Clouds from 'vanta/dist/vanta.clouds.min'\nimport * as THREE from 'three'\n\nconst WelcomeScreen = ({children}) => {\n    const myRefDiv = useRef(null)\n\n    const [vanta,setVanta] = useState(0)\n\n    useEffect(() => {\n        if (!vanta) {\n            setVanta(Clouds({\n                THREE,\n                el: myRefDiv.current\n            }))\n        }\n\n        return () => {\n            if (vanta) {\n                vanta.destroy()\n            }\n        }\n    },[vanta])\n\n    return (\n        <div className = \"full\" ref={myRefDiv}>\n            {children}\n        </div>\n    )\n}\n\nWelcomeScreen.propTypes = {\n    chidren: PropTypes.node,\n}\n\nexport default WelcomeScreen\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Link from 'react-router-dom/Link'\nimport Typography from '@material-ui/core/Typography'\nimport WelcomeScreen from '../components/WelcomeScreen'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { IconContext } from 'react-icons'\nimport { WiDaySunny } from 'react-icons/wi'\n\nconst WelcomePage = props => {\n    return (\n        <WelcomeScreen>\n            <Grid container\n                    direction=\"column\"\n                    justify = \"center\"\n                    className = \"full\">\n                        <div className=\"highlight\">\n                            <Grid item container xs={12}\n                                    justify=\"center\"\n                                    alignItems=\"center\" >\n                                <Grid item>\n                                    <IconContext.Provider value={{ size:\"6em\" }}>\n                                        <WiDaySunny />\n                                    </IconContext.Provider>\n                                </Grid>\n                                <Grid item container\n                                        direction=\"column\"\n                                        justify=\"center\"\n                                        alignItems=\"center\">\n                                    <Typography variant=\"h4\" color=\"inherit\">\n                                            Weather App\n                                    </Typography>\n                                    <Link color=\"inherit\"\n                                        aria-label=\"menu\"\n                                        component={RouterLink}\n                                        to=\"/main\">\n                                        Enter\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n            <Link to='/main'> Go to main </Link>\n        </WelcomeScreen>\n    )\n}\n\nexport default WelcomePage\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Grid from '@material-ui/core/Grid'\nimport { IconContext } from 'react-icons'\nimport IconButton from '@material-ui/core/IconButton'\nimport Link from '@material-ui/core/Link'\nimport { Link as LinkRouter } from 'react-router-dom/Link'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { WiDaySunny } from 'react-icons/wi'\n\nconst AppFrame = ({children}) => {\n    return (\n        <Grid container justify = \"center\">\n            <AppBar position = \"static\">\n                <Toolbar variant = \"dense\">\n                    <IconButton color=\"inherit\" aria-label=\"menu\">\n                        <Link \n                            component={LinkRouter}\n                            to=\"/main\"\n                            color=\"inherit\"\n                            aria-label=\"menu\">\n                            <IconContext.Provider value={{size:'2em'}}>\n                                <WiDaySunny/>\n                            </IconContext.Provider>\n                        </Link>\n                    </IconButton>\n                    <Typography variant='h6' color=\"inherit\">\n                        Weather App\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid item xs={12} sm={11} md={10} lg={8}>\n                {children}\n            </Grid>\n        </Grid>\n    )\n}\n\nAppFrame.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default AppFrame\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {WiCloud,\n        WiRaindrop,\n        WiDaySunny,\n        WiRain,\n        WiSnow,\n        WiThunderstorm} from 'react-icons/wi'\n\nexport const validValues = [\n        \"clouds\",\n        \"clear\",\n        \"rain\",\n        \"snow\",\n        \"drizzle\",\n        \"thunderstorm\"\n    ]\n\nconst stateByName = {\n        clouds: WiCloud,\n        clear: WiDaySunny,\n        drizzle: WiRaindrop,\n        snow: WiSnow,\n        rain: WiRain,\n        thunderstorm: WiThunderstorm\n    }\n\nconst renderState = state => {\n    const IconState = stateByName[state]\n    return <IconState/>\n}\n\nconst IconState = ({state}) => {\n    return (\n        renderState(state)\n    )\n}\n\nIconState.propTypes = {\n state: PropTypes.oneOf(validValues).isRequired,\n}\n\nexport default IconState\n","import convertUnits from 'convert-units'\n\nexport const getCityAndCountry = (city, countryCode) => `${city}-${countryCode}`\nexport const toCelsius = (number) => Number(convertUnits(number).from(\"K\").to(\"C\").toFixed(0))","import { validValues } from '../../components/IconState'\nimport { getCityAndCountry, toCelsius } from '../utils'\n\nconst getAllWeather = (response, city, countryCode) => {\n    \n    const { data } = response\n\n    const key = getCityAndCountry(city,countryCode)\n    const temperature = toCelsius(data.main.temp)\n    const wind = data.wind.speed\n    const humidity = data.main.humidity\n    const stateFromServer = data.weather[0].main.toLowerCase()\n\n    const state = validValues.includes(stateFromServer) ? stateFromServer : null\n    const propValue = {temperature, state, wind, humidity}\n    \n    return ({[key]: propValue}) \n}\n\nexport default getAllWeather","const api_key = `a2a3072629512251e3858069addc6dd4`;\nconst url_base_weather = `http://api.openweathermap.org/data/2.5/weather`;\nconst url_forecast_weather = `https://api.openweathermap.org/data/2.5/forecast`;\n\nexport const getUrlWeather = (city,countryCode) => `${url_base_weather}?q=${city},${countryCode}&appid=${api_key}`\nexport const getUrlForecast = (city,countryCode) => `${url_forecast_weather}?q=${city},${countryCode}&appid=${api_key}`","import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport getAllWeather from '../utils/transform/getAllWeather'\nimport { getUrlWeather } from '../utils/urls'\n\nconst useCityList = ( cities ) => {\n\n    const [allWeather, setAllWeather] = useState({})\n    const [error,setError] = useState(null)\n\n    useEffect(() => {\n        const setWeather = async (city, countryCode, country) => {\n\n            const url = getUrlWeather(city, countryCode)\n            \n            try {\n                const response = await axios.get(url)\n\n                const AllWeatherAux = getAllWeather(response, city, countryCode, country )\n\n                setAllWeather( allWeather => ({...allWeather,...AllWeatherAux}))\n                \n            } catch (error) {\n                if (error.response) {\n                    // errors with a response by the server\n                    const {data, status} = error.response\n                    console.log(\"data :\",data)\n                    console.log(\"status :\", status)\n                    setError(\"An error occurred in the server\")\n                } else if (error.request) {\n                    // request doesnt arrive to server\n                    console.log(\"request doesnt arrive to server\")\n                    setError(\"Server unreachable or maybe your device is offline\")\n                } else {\n                    //unexpected errors\n                    console.log(\"Unexpected error\")\n                    setError(\"Error until loading data\")\n                }\n                \n            }\n\n        }\n\n        cities.forEach(({city, countryCode}) => {\n            setWeather(city, countryCode)\n        })\n        \n\n     },[cities])\n\n     return {allWeather, error, setError}\n}\n\nexport default useCityList","import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'typeface-roboto'\nimport Typography from '@material-ui/core/Typography'\n\nconst CityInfo = ({city, country}) => {\n    return (\n        <>\n            <Typography display=\"inline\" variant=\"h4\">{city}, </Typography>\n            <Typography display=\"inline\" variant=\"h5\">{country}</Typography>\n        </>\n    )\n}\n\nCityInfo.propTypes = {\n    city:PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n}\n\nexport default CityInfo\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport {IconContext} from 'react-icons'\nimport IconState, { validValues } from '../IconState'\n\n\nconst Weather = ({temperature, state}) => {\n    return (\n        <Grid container\n                item\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}>\n            <IconContext.Provider value={{size:'6em'}}>\n            {\n                state ?\n                <IconState state = {state && state}/>\n                :\n                <Skeleton variant=\"circle\" height={80} width={80}/>\n            }  \n            </IconContext.Provider>\n            {temperature ?\n                <Typography variant=\"h2\" display=\"inline\">{temperature}</Typography>\n                :\n                <Skeleton variant=\"rect\" height={80} width={80}/>\n            }\n        </Grid>\n    )\n}\n\nWeather.propTypes = {\n    temperature: PropTypes.number,\n    state: PropTypes.oneOf(validValues),\n}\n\nexport default Weather\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport Alert from '@material-ui/lab/Alert'\nimport useCityList from '../../hooks/useCityList'\nimport { getCityAndCountry } from '../../utils/utils'\nimport CityInfo from '../CityInfo'\nimport Weather from '../Weather'\n\nconst renderCityAndCountry = eventOnClickCity => (CityAndCountry, weather) => {\n\n    const {city, country, countryCode} = CityAndCountry\n\n    return (\n        <ListItem button key = {getCityAndCountry(city, countryCode)}\n                        onClick= {() => eventOnClickCity(city, countryCode)}>\n            <Grid container justify = \"center\" alignItems = \"center\">\n                <Grid item md = {9} xs = {12}>\n                    <CityInfo city = {city} country = {country} />\n                </Grid>\n                <Grid item md = {3} xs = {12}>\n                        <Weather\n                            temperature = {weather && weather.temperature}\n                            state = {weather && weather.state}\n                        />\n                </Grid>\n            </Grid>\n        </ListItem>\n    )\n}\n\nconst CityList = ({cities, onClickCity}) => {\n    const {allWeather, error, setError} = useCityList(cities)\n    return(\n        <div>\n            {\n                error && <Alert onClose={() => setError(null)} severity=\"error\">{error}</Alert>\n            }\n            <List>\n                { \n                    cities.map(city => renderCityAndCountry(onClickCity)(city,\n                        allWeather[getCityAndCountry(city.city, city.countryCode)]))\n                }\n            </List>\n        </div>\n        )\n    }\n\n\nCityList.propTypes = {\n    cities: PropTypes.arrayOf(PropTypes.shape({\n        city:PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired,\n        countryCode: PropTypes.string.isRequired,\n    })).isRequired,\n    onClickCity: PropTypes.func.isRequired,\n}\n\nexport default CityList\n","const cities = [{\n    city:\"Madrid\",\n    country:\"España\",\n    countryCode:\"ES\"\n    },\n    {\n    city:\"Bogotá\",\n    country:\"Colombia\",\n    countryCode:\"CO\"\n    },\n    {\n    city:\"Avilés\",\n    country:\"España\",\n    countryCode:\"ES\"\n    }]\n\nexport const getCities = () => cities\n\nexport const getContryByCountryCode = (code) => cities.filter( item => item.countryCode === code)[0].country","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport AppFrame from '../components/AppFrame'\nimport CityList from '../components/CityList'\nimport { getCities } from '../utils/serviceCities'\n\n\nconst MainPage = () => {\n    \n    const history = useHistory()\n\n    const onClickHandler = (city, countryCode) => {\n        history.push(`/city/${countryCode}/${city}`)\n    }\n\n    return (\n        <AppFrame>\n            <Paper elevation={3}>\n                <CityList cities = {getCities()} onClickCity={onClickHandler}/>\n            </Paper>\n        </AppFrame>\n    )\n}\n\nexport default MainPage\n","import moment from 'moment'\nimport 'moment/locale/es'\nimport { toCelsius } from '../utils'\n\nconst getChartData = (data) => {\n    const daysAhead = [0,1,2,3,4,5]\n    const days = daysAhead.map( d => moment().add(d, 'd'))\n\n    const dataAux = days.map( day => {\n        \n        const tempObjArray = data.list.filter( item => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear()\n            return dayOfYear === day.dayOfYear()\n        })\n\n        const temps = tempObjArray.map( item => item.main.temp)\n\n        return({\n            dayHour: day.format(`ddd`),\n            min: toCelsius(Math.min(...temps)),\n            max: toCelsius(Math.max(...temps)),\n            hasTemps: (temps.length > 0 ? true:false)\n        })\n\n    }).filter(item => item.hasTemps)\n\n    return dataAux\n}\n\nexport default getChartData","import moment from 'moment'\nimport 'moment/locale/es'\nimport { toCelsius } from '../utils'\n\nconst getForecastItemList = (data) => {\n    const interval = [4, 8, 12, 16, 20, 24]\n    const forecastItemListAux = data.list\n        .filter((item, index) => interval.includes(index))\n        .map( item => { \n            return({\n                hour:moment.unix(item.dt).hour(),\n                weekDay: moment.unix(item.dt).format('dddd'),\n                state: item.weather[0].main.toLowerCase(),\n                temperature: toCelsius(item.main.temp)\n            })\n        })\n    \n        return forecastItemListAux\n}\n\nexport default getForecastItemList","import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams } from 'react-router-dom'\nimport getChartData from '../utils/transform/getChartData'\nimport getForecastItemList from '../utils/transform/getForecastItemList'\nimport { getUrlForecast } from '../utils/urls'\n\nconst useCityPage = () => {\n    const[data, setData] = useState(null)\n    const[forecastItemList, setForecastItemList] = useState(null)\n\n    const { city, countryCode } = useParams()\n\n    useEffect(() => {\n\n        const getForecast = async () => {\n            const url = getUrlForecast(city, countryCode)\n            try{\n                const { data } = await axios.get(url)\n\n                const dataAux = getChartData(data)\n                setData(dataAux)\n\n                const forecastItemListAux = getForecastItemList(data)\n                setForecastItemList(forecastItemListAux)\n                \n            } catch(error) {\n        \n            }\n        }\n\n        getForecast()\n\n    }, [city, countryCode])\n\n    return {data, forecastItemList, city, countryCode}\n}\n\nexport default useCityPage","import React from 'react'\nimport { LineChart,\n            Line,\n            XAxis,\n            YAxis,\n            CartesianGrid,\n            Tooltip,\n            Legend,\n            ResponsiveContainer } from 'recharts'\nimport PropTypes from 'prop-types'\n\nconst ForecastChart = ({data}) => {\n    return (\n        <ResponsiveContainer width={\"95%\"} height={250}>\n            <LineChart margin={{top: 20, bottom: 20, right: 5, left:5}}\n                        data={data}>\n            <XAxis dataKey=\"dayHour\"></XAxis>\n            <YAxis></YAxis>\n            <CartesianGrid/>\n            <Legend/>\n            <Tooltip/>\n            <Line type=\"monotone\" dataKey=\"max\" stroke=\"#FF0000\"/>\n            <Line type=\"monotone\" dataKey=\"min\" stroke=\"#0000FF\"/>\n            </LineChart>\n        </ResponsiveContainer>\n    )\n}\n\nForecastChart.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.shape({\n        dayHour: PropTypes.string.isRequired,\n        min: PropTypes.number.isRequired,\n        max: PropTypes.number.isRequired,\n    })).isRequired,\n}\n\nexport default ForecastChart\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport {IconContext} from 'react-icons'\nimport IconState , {validValues} from '../IconState'\n\nconst ForecastItem = ({weekDay, hour, state, temperature}) => {\n    return (\n        <div>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                <Grid item><Typography>{weekDay}</Typography></Grid>\n                <Grid item><Typography>{hour}</Typography></Grid>\n                <Grid item>\n                    <IconContext.Provider value={{size:'5em'}}>\n                        <IconState state={state}/>\n                    </IconContext.Provider>\n                </Grid>\n                <Grid item><Typography>{temperature} º</Typography></Grid>\n            </Grid>\n        </div>\n    )\n}\n\nForecastItem.propTypes = {\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    state: PropTypes.oneOf(validValues).isRequired,\n    temperature: PropTypes.number.isRequired,\n}\n\nexport default ForecastItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ForecastItem from '../ForecastItem'\nimport Grid from '@material-ui/core/Grid'\nimport {validValues} from '../IconState'\n\nconst renderForecastItems = node => {\n    const {weekDay, hour, state, temperature} = node\n    return(\n        <Grid item data-testid = 'forecast-item-container'\n                key = {`${weekDay}${hour}`}>\n            <ForecastItem weekDay = {weekDay}\n                            hour = {hour}\n                            state = {state}\n                            temperature = {temperature}\n            />\n        </Grid>)\n}\n\nconst Forecast = ({list}) => {\n    return (\n        <Grid container justify=\"space-around\" alignItems=\"center\">\n            {list.map(node => renderForecastItems(node))}\n        </Grid>\n    )\n}\n\nForecast.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.shape({\n        weekDay: PropTypes.string.isRequired,\n        hour: PropTypes.number.isRequired,\n        state: PropTypes.oneOf(validValues).isRequired,\n        temperature: PropTypes.number.isRequired,\n    })).isRequired,\n}\n\nexport default Forecast\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\n\nconst WeatherDetails = ({humidity, wind}) => {\n    return (\n        <div>\n            <Typography>humedad: {humidity}%</Typography>\n            <Typography>viento: {wind} km/h</Typography>\n        </div>\n    )\n}\n\nWeatherDetails.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n}\n\nexport default WeatherDetails\n","import React, { useMemo } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport useCityPage from '../hooks/useCityPage'\nimport useCityList from '../hooks/useCityList'\nimport { getCityAndCountry } from '../utils/utils'\nimport { getContryByCountryCode } from '../utils/serviceCities'\nimport AppFrame from '../components/AppFrame'\nimport CityInfo from '../components/CityInfo'\nimport ForecastChart from '../components/ForecastChart'\nimport Forecast from '../components/Forecast'\nimport Weather from '../components/Weather'\nimport WeatherDetails from '../components/WeatherDetails'\n\nconst CityPage = () => {\n\n    const { data, forecastItemList, city, countryCode } = useCityPage()\n\n    const country = getContryByCountryCode(countryCode)\n\n    const cities = useMemo(() => ([{city, countryCode}]), [city, countryCode])\n    const {  allWeather } = useCityList(cities)\n\n    const key = getCityAndCountry(city, countryCode)\n    const weather = allWeather[key]\n    \n    const temperature = weather && weather.temperature\n    const state = weather && weather.state\n    const wind = weather && weather.wind\n    const humidity = weather && weather.humidity\n    \n    return (\n        <AppFrame>\n            <Grid container\n                justify=\"space-around\"\n                direction = \"column\"\n                spacing={2}>\n                \n                <Grid container item\n                        xs={12}\n                        justify=\"center\"\n                        alignItems=\"flex-end\">\n                        <CityInfo city = {city} country={country}/>  \n                </Grid>\n                \n                <Grid item container\n                        xs={12}\n                        justify=\"center\">\n                        <Weather temperature={temperature} state={state}/>\n                        <WeatherDetails wind={wind} humidity={humidity}/>\n                </Grid>\n                <Grid>\n                     {!data && !forecastItemList && <LinearProgress/>}\n                </Grid>\n                \n                <Grid item  sm={12}>\n                    {\n                        data && <ForecastChart data={data}/>\n                    }\n                </Grid>\n                \n                <Grid item  sm={12}>\n                    {\n                        forecastItemList && <Forecast list={forecastItemList}/>\n                    }\n                </Grid>\n            </Grid>\n        </AppFrame>\n    )\n}\n\nexport default CityPage\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst NotFound = () => {\n    return (\n        <div>\n            Not Found Page\n            <div>\n                <Link to='/main'>Go to main</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default NotFound\n","import React from 'react'\nimport { BrowserRouter as Router,\n        Switch,\n        Route } from 'react-router-dom'\nimport WelcomePage from './pages/WelcomePage'\nimport MainPage from './pages/MainPage'\nimport CityPage from './pages/CityPage'\nimport NotFoundPage from './pages/NotFoundPage'\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path = \"/\">\n                    <WelcomePage/>\n                </Route>\n                <Route path = \"/main\">\n                    <MainPage />\n                </Route>\n                <Route path = \"/city/:countryCode/:city\">\n                    <CityPage />\n                </Route>\n                <Route>\n                    <NotFoundPage />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}